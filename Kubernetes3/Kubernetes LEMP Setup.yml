The Nautilus DevOps team want to deploy a static website on Kubernetes cluster. 
They are going to use Nginx, phpfpm and MySQL for the database. 
The team had already gathered the requirements and now they want to make this website live. Below you can find more details:



Create some secrets for MySQL.

Create a secret named mysql-root-pass wih key/value pairs as below:

name: password
value: R00t




Create a secret named mysql-user-pass with key/value pairs as below:

name: username
value: kodekloud_rin

name: password
value: ksH85UJjhb




Create a secret named mysql-db-url with key/value pairs as below:

name: database
value: kodekloud_db2




Create a secret named mysql-host with key/value pairs as below:

name: host
value: mysql-service




Create a config map php-config for php.ini with variables_order = "EGPCS" data.

Create a deployment named lemp-wp.


Create two containers under it. First container must be nginx-php-container using image webdevops/php-nginx:alpine-3-php7 and second container must be mysql-container from image mysql:5.6. Mount php-config configmap in nginx container at /opt/docker/etc/php/php.ini location.


5) Add some environment variables for both containers:


MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD and MYSQL_HOST. Take their values from the secrets you created. Please make sure to use env field (do not use envFrom) to define the name-value pair of environment variables.

6) Create a node port type service lemp-service to expose the web application, nodePort must be 30008.


7) Create a service for mysql named mysql-service and its port must be 3306.


We already have a /tmp/index.php file on jump_host server.


Copy this file into the nginx container under document root i.e /app and replace the dummy values for mysql related variables with the environment variables you have set for mysql related parameters. Please make sure you do not hard code the mysql related details in this file, you must use the environment variables to fetch those values.


Once done, you must be able to access this website using Website button on the top bar, please note that you should see Connected successfully message while accessing this page.


Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.\

Solution:

vi deploy.yaml

apiVersion: v1
kind: Secret
metadata:
  name: mysql-root-pass
type: Opaque
stringData:
  password: "R00t"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-user-pass
type: Opaque
stringData:
  username: "kodekloud_rin"
  password: "ksH85UJjhb"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-db-url
type: Opaque
stringData:
  database: "kodekloud_db2"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-host
type: Opaque
stringData:
  host: "mysql-service"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: php-config
data:
  php.ini: |
    ; Custom php.ini from configmap
    variables_order = "EGPCS"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: index-php
data:
  index.php: |
    <?php
    // index.php provided via configmap.
    // Use environment variables for DB connection (no hard-coded secrets)
    $db_host = getenv('MYSQL_HOST') ?: 'localhost';
    $db_name = getenv('MYSQL_DATABASE') ?: '';
    $db_user = getenv('MYSQL_USER') ?: '';
    $db_pass = getenv('MYSQL_PASSWORD') ?: '';

    echo "<h2>LEMP on Kubernetes</h2>";

    // simple test connection to MySQL
    $mysqli = @new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($mysqli && $mysqli->connect_errno == 0) {
      echo "<p>Connected successfully</p>";
      $mysqli->close();
    } else {
      echo "<p>Connection failed: ";
      if ($mysqli) {
        echo htmlspecialchars($mysqli->connect_error);
      } else {
        echo "unable to create mysqli object";
      }
      echo "</p>";
    }
    ?>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lemp-wp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lemp-wp
  template:
    metadata:
      labels:
        app: lemp-wp
    spec:
      containers:
      - name: nginx-php-container
        image: webdevops/php-nginx:alpine-3-php7
        ports:
        - containerPort: 80
          name: http
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-root-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-db-url
              key: database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: password
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: mysql-host
              key: host
        volumeMounts:
        # mount php.ini file from configmap to exact path
        - name: php-config-vol
          mountPath: /opt/docker/etc/php/php.ini
          subPath: php.ini
        # mount index.php into document root /app/index.php
        - name: index-php-vol
          mountPath: /app/index.php
          subPath: index.php
      - name: mysql-container
        image: mysql:5.6
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-root-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-db-url
              key: database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-user-pass
              key: password
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: mysql-host
              key: host
        # optional: a small emptyDir for DB runtime (not persistent)
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: php-config-vol
        configMap:
          name: php-config
          items:
          - key: php.ini
            path: php.ini
      - name: index-php-vol
        configMap:
          name: index-php
          items:
          - key: index.php
            path: index.php
      - name: mysql-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: lemp-service
spec:
  type: NodePort
  selector:
    app: lemp-wp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30008
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: lemp-wp
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
    
    
kubectl apply -f deploy.yaml
